name: Gladia Docker Hub Push

on:
  workflow_dispatch:
  pull_request:
    types:
      - closed

concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: false

jobs:
  build:
    if: |-
      ${{ 
        !contains(github.event.pull_request.labels.*.name, 'ci') &&
        !contains(github.event.pull_request.labels.*.name, 'doc') &&
        github.event.pull_request.merged == true
      }}
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to NVCR Registry
        uses: docker/login-action@v2
        with:
          registry: nvcr.io
          username: ${{ secrets.NVCR_USERNAME }}
          password: ${{ secrets.NVCR_ACCESS_TOKEN }}
          
      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}
          
      - name: Build Gladia Base image
        if: "contains(github.event.pull_request.labels.*.name, 'ci: force-build-base')"
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: |
          docker build \
          --no-cache \
          -t docker.gladia.io/gladia-base:latest |
          -f base.Dockerfile \
          .
        
      - name: Push new base latest to Gladia registry
        if: "contains(github.event.pull_request.labels.*.name, 'ci: force-build-base')"
        run: docker push docker.gladia.io/gladia-base:latest

      - name: Build Gladia image with no-cache
        if: "contains(github.event.pull_request.labels.*.name, 'ci: force-no-cache')"
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: |
          docker build \
          --no-cache \
          -t docker.gladia.io/gladia:ci-${{ github.event.pull_request.number }} \
          -f gpu.Dockerfile \
          .

      - name: Build Gladia image
        if: "!contains(github.event.pull_request.labels.*.name, 'ci: force-no-cache')"
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: |
          docker build \
          -t docker.gladia.io/gladia:ci-${{ github.event.pull_request.number }} \
          -f gpu.Dockerfile \
          .

  promote-DH:
    needs: build
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Tag image for Docker Hub latest
        run: docker tag docker.gladia.io/gladia:ci-${{ github.event.pull_request.number }} gladiaio/gladia:latest

      - name: Login to DockerHub Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push latest to Docker Hub
        run: docker push gladiaio/gladia:latest

  promote-gladia:
    if: github.event.pull_request.merged == true
    runs-on: [self-hosted, linux, STD]
    steps:
      - name: Tag image for Docker Gladia latest
        run: docker tag docker.gladia.io/gladia:ci-${{ github.event.pull_request.number }} docker.gladia.io/gladia:latest

      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}

      - name: Push latest to Gladia registry
        run: docker push docker.gladia.io/gladia:latest
        
      - name: clean builder local cache
        run: docker rmi $(docker images | grep 'ci-${{ github.event.pull_request.number }}') 2>/dev/null

  notify-release:
    needs: promote-DH
    runs-on: [self-hosted, linux, STD]
    steps:
      - uses: actions/checkout@v2
      - name: Notify Slack DH Release
        uses: rtCamp/action-slack-notify@v2.2.0
        env: 
          SLACK_CHANNEL: #releases
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: gladia-ai-ci
          SLACK_TITLE: 'New Docker Hub Release :rocket:'
          SLACK_MESSAGE: ${{ github.event.pull_request.title }} by ${{ github.event.pull_request.user.login }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ':rocket:'

  deploy-aipi-1:
    needs: promote-gladia
    runs-on: [self-hosted, linux, aipi-1]
    steps:
      - name: Notify Slack deployment
        uses: rtCamp/action-slack-notify@v2.2.0
        env: 
          SLACK_CHANNEL: #releases
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: gladia-ai-ci
          SLACK_TITLE: 'New Deployment on aipi1 :rocket:'
          SLACK_MESSAGE: ${{ github.event.pull_request.title }} by ${{ github.event.pull_request.user.login }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ':rocket:'
      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}
      
      - name: pull latest
        run: docker pull docker.gladia.io/gladia:latest

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d --name gladia-aipi \
            --gpus all --shm-size=5g \
            -p 80:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${{ secrets.TRITON_SERVER_URL }} \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }} \
            -e STABILITY_KEY=${{ secrets.STABILITY_KEY }} \
            -e MODE=server \
            docker.gladia.io/gladia:latest

      # todo : healthcheck, notify failure

  deploy-aipi-2:
    needs: deploy-aipi-1
    runs-on: [self-hosted, linux, aipi-2]
    steps:
      - name: Notify Slack deployment
        uses: rtCamp/action-slack-notify@v2.2.0
        env: 
          SLACK_CHANNEL: #releases
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: gladia-ai-ci
          SLACK_TITLE: 'New Deployment on aipi2 :rocket:'
          SLACK_MESSAGE: ${{ github.event.pull_request.title }} by ${{ github.event.pull_request.user.login }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ':rocket:'
      - name: Login to Gladia Registry
        uses: docker/login-action@v1
        with:
          registry: docker.gladia.io
          username: ${{ secrets.DOCKER_GLADIA_USERNAME }}
          password: ${{ secrets.DOCKER_GLADIA_ACCESS_TOKEN }}
      
      - name: pull latest
        run: docker pull docker.gladia.io/gladia:latest

      - name: stop docker gladia
        run: docker kill gladia-aipi && docker rm gladia-aipi

      - name: start docker gladia
        run: | 
            docker run -d \
            --name gladia-aipi \
            --gpus all \
            --shm-size=5g \
            -p 80:8080 \
            -v /tmp/gladia:/tmp/gladia \
            -e TRITON_SERVER_PORT_HTTP=8000 \
            -e TRITON_SERVER_URL=${{ secrets.TRITON_SERVER_URL }} \
            -e TRITON_LAZY_DOWNLOAD=false \
            -e TRITON_MODELS_PATH=/tmp/gladia/triton \
            -e HUGGINGFACE_ACCESS_TOKEN=${{ secrets.HUGGINGFACE_ACCESS_TOKEN }} \
            -e STABILITY_KEY=${{ secrets.STABILITY_KEY }} \
            -e MODE=server \
            docker.gladia.io/gladia:latest

  notify-deployments:
    needs: [deploy-aipi-2, deploy-aipi-2]
    runs-on: [self-hosted, linux, STD]
    steps:
      - uses: actions/checkout@v2
      - name: Notify Slack Deployment done
        uses: rtCamp/action-slack-notify@v2.2.0
        env: 
          SLACK_CHANNEL: #releases
          SLACK_COLOR: ${{ job.status }}
          SLACK_USERNAME: gladia-ai-ci
          SLACK_TITLE: 'Deployment done :rocket:'
          SLACK_MESSAGE: ${{ github.event.pull_request.title }} by ${{ github.event.pull_request.user.login }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON_EMOJI: ':rocket:'
      
      
  # todo : healthcheck, notify failure
